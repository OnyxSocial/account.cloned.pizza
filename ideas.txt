Users Table
This table stores information about each user.


CREATE TABLE Users (
    UserID INT PRIMARY KEY AUTO_INCREMENT,
    Username VARCHAR(50) UNIQUE NOT NULL,
    Email VARCHAR(100) UNIQUE NOT NULL,
    PasswordHash VARCHAR(255) NOT NULL,
    FullName VARCHAR(100),
    Bio TEXT,
    ProfilePictureURL VARCHAR(255),
    DateJoined DATETIME DEFAULT CURRENT_TIMESTAMP
);
Posts Table
This table stores posts made by users.

CREATE TABLE Posts (
    PostID INT PRIMARY KEY AUTO_INCREMENT,
    UserID INT NOT NULL,
    Content TEXT NOT NULL,
    ImageURL VARCHAR(255),
    DatePosted DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (UserID) REFERENCES Users(UserID)
);
Comments Table
This table stores comments on posts.


CREATE TABLE Comments (
    CommentID INT PRIMARY KEY AUTO_INCREMENT,
    PostID INT NOT NULL,
    UserID INT NOT NULL,
    Content TEXT NOT NULL,
    DateCommented DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (PostID) REFERENCES Posts(PostID),
    FOREIGN KEY (UserID) REFERENCES Users(UserID)
);
Likes Table
This table stores likes on posts.


CREATE TABLE Likes (
    LikeID INT PRIMARY KEY AUTO_INCREMENT,
    PostID INT NOT NULL,
    UserID INT NOT NULL,
    DateLiked DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (PostID) REFERENCES Posts(PostID),
    FOREIGN KEY (UserID) REFERENCES Users(UserID),
    UNIQUE (PostID, UserID)
);
Friendships Table
This table stores user friendships.


CREATE TABLE Friendships (
    User1ID INT NOT NULL,
    User2ID INT NOT NULL,
    Status ENUM('Pending', 'Accepted', 'Rejected') DEFAULT 'Pending',
    DateRequested DATETIME DEFAULT CURRENT_TIMESTAMP,
    DateAccepted DATETIME,
    PRIMARY KEY (User1ID, User2ID),
    FOREIGN KEY (User1ID) REFERENCES Users(UserID),
    FOREIGN KEY (User2ID) REFERENCES Users(UserID)
);
Messages Table
This table stores private messages between users.


CREATE TABLE Messages (
    MessageID INT PRIMARY KEY AUTO_INCREMENT,
    SenderID INT NOT NULL,
    ReceiverID INT NOT NULL,
    Content TEXT NOT NULL,
    DateSent DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (SenderID) REFERENCES Users(UserID),
    FOREIGN KEY (ReceiverID) REFERENCES Users(UserID)
);
Example of Inserting Data
Here are some examples of inserting data into these tables.



INSERT INTO Users (Username, Email, PasswordHash, FullName, Bio, ProfilePictureURL)
VALUES ('johndoe', 'johndoe@example.com', 'hashed_password', 'John Doe', 'Hello, I am John!', 'http://example.com/profile/johndoe.jpg');


INSERT INTO Posts (UserID, Content, ImageURL)
VALUES (1, 'This is my first post!', 'http://example.com/images/post1.jpg');


INSERT INTO Comments (PostID, UserID, Content)
VALUES (1, 2, 'Nice post!');


INSERT INTO Likes (PostID, UserID)
VALUES (1, 2);


INSERT INTO Friendships (User1ID, User2ID)
VALUES (1, 2);


INSERT INTO Messages (SenderID, ReceiverID, Content)
VALUES (1, 2, 'Hello! How are you?');

Database Relationships
Each user can create multiple posts, comments, likes, and messages.
Posts can have multiple comments and likes.
Friendships are managed via a many-to-many relationship, represented by the Friendships table with a composite primary key.
Messages represent direct user-to-user communication.
This schema is a starting point and can be expanded with additional features like notifications, groups, events, etc., depending on the requirements of the social network.






